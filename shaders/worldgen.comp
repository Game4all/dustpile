#version 450
#include shaders/shared.glsl

layout(local_size_x = 32,  local_size_y = 32) in;

layout(rgba8i, binding = 0) uniform iimage2D World;

// The height of the base layer of the world
const int BASE_HEIGHT = 16;

float lNoise(float pos) {
    return sin(pos * 0.001) * 0.8
        +  Random(vec2(pos * 0.0001, 0.4783)) * 0.4
        +  Random(vec2(pos * 0.0001, 0.4783)) * 0.8;
}

/// Returns the material ID for the given height
int GetMaterialForHeight(ivec2 pos) {
    const int TARGET_HEIGHT = BASE_HEIGHT + int(lNoise(pos.x * 0.01) * 8.);
    const int DIRT_LAYER = BASE_HEIGHT - 3 + int(lNoise(pos.x * 0.01) * 2.);
    const int ROCK_LAYER = BASE_HEIGHT / 3 + int(lNoise(pos.x * 0.01) * 2.);
    const int SAND_LAYER = BASE_HEIGHT / 2 + int(lNoise(pos.x * 0.01) * 4.);

    if (pos.y >= TARGET_HEIGHT) 
        return MAT_ID_AIR;
    else if (pos.y >= DIRT_LAYER) 
        return MAT_ID_DIRT;
    else if (pos.y >= SAND_LAYER) 
       return MAT_ID_SAND;
    else if (pos.y >= ROCK_LAYER) 
        return MAT_ID_STONE;
    else 
       return MAT_ID_STONE;

    return MAT_ID_AIR;
}

void main() {
    ivec2 size = imageSize(World) / PIXEL_SIZE;
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    if (pos.x >= size.x || pos.y >= size.y) 
        return;

    int rnd = int(gl_LocalInvocationIndex) % 255;
    ivec4 material = ivec4(GetMaterialForHeight(pos), 0, 0, rnd);

    if (material.r == MAT_ID_AIR)
        material.a = 0; // Air is transparent

    imageStore(World, pos, material);
}